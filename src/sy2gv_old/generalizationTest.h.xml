<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="generalizationTest.hpp"><class>class <name>String</name> <block>{<private type="default">
</private><public>public:
    <constructor><name>String</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    <constructor><name>String</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list><block>{}</block></constructor>
    <destructor><name>~<name>String</name></name><parameter_list>()</parameter_list><block>{}</block></destructor>
    
    <function type="operator"><type><name>String</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list><block>{}</block></function>
</public>}</block>;</class>

<class>class <name>Window</name><block>{<private type="default">
</private><public>public:
    <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>draw</name><parameter_list>()</parameter_list> = <literal type="number">0</literal>;</function_decl>
    <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>minimize</name><parameter_list>()</parameter_list> = <literal type="number">0</literal>;</function_decl>
    <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>maximize</name><parameter_list>()</parameter_list> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</class>

<class>class <name>MyOperatingSystemWindow</name> <super>: <specifier>public</specifier> <name>Window</name></super><block>{<private type="default">
</private><public>public:
    <constructor><name>MyOperatingSystemWindow</name><parameter_list>()</parameter_list><block>{}</block></constructor>
</public><private>private:
    <decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WindowID</name></type> <name>ID</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>MyApplicationWindow</name> <super>: <specifier>public</specifier> <name>MyOperatingSystemWindow</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>MyApplicationWindow</name><parameter_list>()</parameter_list>;</constructor_decl>
</public><private>private:
    <decl_stmt><decl><type><name><name>List</name><argument_list type="template">&lt;<argument><expr><name>Content</name></expr></argument>&gt;</argument_list></name></type> <name>myApplicationContent</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>WindowID</name> <block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name>String</name></type> <name>ID</name></decl>, <decl><type ref="prev"/><name>name</name></decl>, <decl><type ref="prev"/><name>cool</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>Content</name> <block>{<private type="default">
</private><public>public:
    <function><type><specifier>virtual</specifier> <name>void</name></type> <name>setContent</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>&amp;</modifier></type><name>newContent</name></decl></parameter>)</parameter_list> <block>{}</block></function>
    <function_decl><type><name>void</name></type> <name>displayContent</name><parameter_list>()</parameter_list>;</function_decl>
</public><private>private:
    <decl_stmt><decl><type><name>String</name></type> <name>currentContent</name></decl>;</decl_stmt>
</private>}</block>;</class>

</unit>
